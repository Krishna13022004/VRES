import React, { useState, useEffect } from "react";
import { FaInfoCircle } from "react-icons/fa";
import axios from "axios"; // NEW: Import axios
import { toast } from "react-toastify"; // NEW: Import toast for better feedback

const InitiateProjectPage = () => {
  const API_BASE_URL = process.env.REACT_APP_API_BASE_URL || "http://localhost:8686";
  // CHANGED: 'phone' is removed as it's not used in the form
  const [formData, setFormData] = useState({
    title: "",
    email: "",
  });

  // NEW: State to hold the list of coordinators for the dropdown
  const [coordinators, setCoordinators] = useState([]);

  const [message, setMessage] = useState("");
  const [error, setError] = useState("");
  const [isLoading, setIsLoading] = useState(false);

  // NEW: useEffect to fetch coordinators when the page loads
  useEffect(() => {
    const fetchCoordinators = async () => {
      try {
        const response = await axios.get(
          `${API_BASE_URL}/vres/users?role=Project Coordinator`
        );
        setCoordinators(response.data);
      } catch (err) {
        console.error("Failed to fetch coordinators:", err);
        toast.error("Could not load project coordinators.");
      }
    };
    fetchCoordinators();
  }, [API_BASE_URL]); // Empty array [] ensures this runs only once

  // CHANGED: handleSubmit now uses axios
  const handleSubmit = async (e) => {
    e.preventDefault();
    setIsLoading(true);
    setMessage("");
    setError("");

    try {
      const response = await axios.post(
        `${API_BASE_URL}/vres/projects/initiate`,
        formData
      );

      const result = response.data;
      setMessage(
        `Project "${result.title}" initiated successfully with ID: ${result.projectId}!`
      );
      toast.success("Project initiated successfully!");
      setFormData({ title: "", email: "" }); // Clear the form on success
    } catch (err) {
      const errorMessage =
        err.response?.data?.message || "Failed to initiate project.";
      setError(errorMessage);
      toast.error(errorMessage);
    } finally {
      setIsLoading(false);
    }
  };

  const handleCancel = () => {
    if (window.confirm("Are you sure you want to cancel?")) {
      setFormData({ title: "", email: "" });
      setMessage("");
      setError("");
    }
  };

  return (
    <div className="initiate-container">
      <h2>Initiate Project</h2>
      <div className="info-heading">
        <p
          className="page-subtitle"
          style={{ textAlign: "center", marginTop: "-10px" }}
        >
          Initiate Project{" "}
          <span
            className="info-icon"
            title={`Note: Password will be autogenerated and sent to the email provided.`}
          >
            <FaInfoCircle />
          </span>
        </p>
      </div>
      <form onSubmit={handleSubmit}>
        <div className="form-group">
          <label htmlFor="title">Project Title</label>
          <input
            type="text"
            id="title"
            value={formData.title}
            required
            onChange={(e) =>
              setFormData({ ...formData, title: e.target.value })
            }
          />
        </div>

        {/* --- CHANGED: Replaced text input with a dropdown --- */}
        <div className="form-group">
          <label htmlFor="email">Project Coordinator</label>
          <select
            id="email"
            className="form-select"
            value={formData.email}
            required
            onChange={(e) =>
              setFormData({ ...formData, email: e.target.value })
            }
          >
            <option value="" disabled>
              -- Select a Coordinator --
            </option>
            {coordinators.map((coordinator) => (
              <option key={coordinator.email} value={coordinator.email}>
                {coordinator.name} ({coordinator.email})
              </option>
            ))}
          </select>
        </div>
        {/* --- END OF CHANGE --- */}

        {message && <div className="alert alert-success">{message}</div>}
        {error && <div className="alert alert-danger">{error}</div>}

        <div className="button-group">
          <button type="submit" className="btn-primary" disabled={isLoading}>
            {isLoading ? "Submitting..." : "Submit"}
          </button>
          <button
            type="button"
            className="btn-secondary"
            onClick={handleCancel}
          >
            Cancel
          </button>
        </div>
      </form>
    </div>
  );
};

export default InitiateProjectPage;
