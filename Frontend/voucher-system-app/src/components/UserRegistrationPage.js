import React, { useState } from "react";
import { FaInfoCircle } from "react-icons/fa";
import { toast } from "react-toastify";

const UserRegistrationPage = () => {
  const API_BASE_URL = process.env.REACT_APP_API_BASE_URL || "http://localhost:8686";
  const projectId = localStorage.getItem("selectedProjectId");
  const [email, setEmail] = useState("");
  const [name, setName] = useState("");
  const [role, setRole] = useState("");
  const [phone, setPhone] = useState("");
  const [gst, setGst] = useState("");
  const [address, setAddress] = useState("");

  const [isLoading, setIsLoading] = useState(false);
  const [message, setMessage] = useState("");
  const [error, setError] = useState("");

  const allowedRoles = ["MAKER", "CHECKER", "VENDOR", "ISSUER"];

  const handleSubmit = async (e) => {
    e.preventDefault();
    setIsLoading(true);
    setMessage("");
    setError("");

    if (!allowedRoles.includes(role)) {
      setError("Selected role is not allowed.");
      setIsLoading(false);
      return;
    }

    const newUserPayload = {
      projectId: localStorage.getItem("selectedProjectId") || projectId,
      email,
      name,
      role: role.toLowerCase(),
      phone,
      // --- MODIFIED: Uncommented and activated vendor-specific fields ---
      gst: role === "VENDOR" ? gst : undefined,
      address: role === "VENDOR" ? address : undefined,
    };

    try {
      const response = await fetch(`${API_BASE_URL}/vres/users`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          // "Authorization": "Bearer YOUR_JWT_TOKEN"
        },
        body: JSON.stringify(newUserPayload),
      });

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.message || "Failed to register user.");
        // eslint-disable-next-line no-unreachable
        toast.success("User registered successfully!");
      }

      const createdUser = await response.json();
      setMessage(
        `User "${createdUser.name}" registered successfully with ID: ${createdUser.userId}!`
      );

      handleCancel();
    } catch (err) {
      setError(err.message);
    } finally {
      setIsLoading(false);
    }
  };

  const handleCancel = () => {
    setEmail("");
    setName("");
    setRole("");
    setPhone("");
    setGst("");
    setAddress("");
    setMessage("");
    setError("");
  };

  return (
    <div
      className="container"
      style={{
        fontFamily: "'Arial', sans-serif",
        backgroundColor: "#f8f9fa",
        padding: "30px",
        borderRadius: "8px",
        boxShadow: "0 4px 12px rgba(0, 0, 0, 0.1)",
        maxWidth: "600px",
        margin: "40px auto",
        color: "#343a40",
      }}
    >
      <h2
        style={{ textAlign: "center", color: "#007bff", marginBottom: "24px" }}
      >
        User Registration
      </h2>

      <div
        style={{
          backgroundColor: "#fff3cd",
          borderLeft: "5px solid #ffc107",
          padding: "15px",
          marginBottom: "20px",
          borderRadius: "4px",
          fontSize: "0.9em",
          color: "#856404",
        }}
      >
        <p
          className="page-subtitle"
          style={{ textAlign: "center", marginTop: "-10px" }}
        >
          User Registration{" "}
          <span
            className="info-icon"
            title={`Rules:
1. Allowed roles for registration: ADMIN only.
2. Password will be autogenerated and sent to the email address.
3. User will have to change the password upon first login.`}
          >
            <FaInfoCircle />
          </span>
        </p>
      </div>

      <form
        onSubmit={handleSubmit}
        style={{
          display: "grid",
          gridTemplateColumns: "1fr",
          gap: "16px",
        }}
      >
        <div className="form-group">
          <label
            htmlFor="email"
            style={{
              fontWeight: "bold",
              marginBottom: "8px",
              display: "block",
            }}
          >
            Email (User ID)
          </label>
          <input
            type="email"
            id="email"
            name="email"
            value={email}
            onChange={(e) => setEmail(e.target.value)}
            required
            style={{
              width: "100%",
              padding: "10px",
              borderRadius: "4px",
              border: "1px solid #ced4da",
              boxSizing: "border-box",
            }}
          />
        </div>

        <div className="form-group">
          <label
            htmlFor="name"
            style={{
              fontWeight: "bold",
              marginBottom: "8px",
              display: "block",
            }}
          >
            Name
          </label>
          <input
            type="text"
            id="name"
            name="name"
            value={name}
            onChange={(e) => setName(e.target.value)}
            required
            style={{
              width: "100%",
              padding: "10px",
              borderRadius: "4px",
              border: "1px solid #ced4da",
              boxSizing: "border-box",
            }}
          />
        </div>

        <div className="form-group">
          <label
            htmlFor="role"
            style={{
              fontWeight: "bold",
              marginBottom: "8px",
              display: "block",
            }}
          >
            Role
          </label>
          <select
            id="role"
            name="role"
            value={role}
            onChange={(e) => setRole(e.target.value)}
            required
            style={{
              width: "100%",
              padding: "10px",
              borderRadius: "4px",
              border: "1px solid #ced4da",
              boxSizing: "border-box",
            }}
          >
            <option value="" disabled>
              Select Role
            </option>
            <option value="MAKER">MAKER</option>
            <option value="CHECKER">CHECKER</option>
            <option value="VENDOR">VENDOR</option>
            <option value="ISSUER">ISSUER</option>
          </select>
        </div>

        <div className="form-group">
          <label
            htmlFor="phone"
            style={{
              fontWeight: "bold",
              marginBottom: "8px",
              display: "block",
            }}
          >
            Phone
          </label>
          <input
            type="tel"
            id="phone"
            name="phone"
            value={phone}
            onChange={(e) => setPhone(e.target.value)}
            required
            style={{
              width: "100%",
              padding: "10px",
              borderRadius: "4px",
              border: "1px solid #ced4da",
              boxSizing: "border-box",
            }}
          />
        </div>

        {/* --- ADDED: Conditional rendering for Vendor-specific fields --- */}
        {role === "VENDOR" && (
          <>
            <div className="form-group">
              <label
                htmlFor="gst"
                style={{
                  fontWeight: "bold",
                  marginBottom: "8px",
                  display: "block",
                }}
              >
                GST Number
              </label>
              <input
                type="text"
                id="gst"
                name="gst"
                value={gst}
                onChange={(e) => setGst(e.target.value)}
                required={role === "VENDOR"}
                style={{
                  width: "100%",
                  padding: "10px",
                  borderRadius: "4px",
                  border: "1px solid #ced4da",
                  boxSizing: "border-box",
                }}
              />
            </div>
            <div className="form-group">
              <label
                htmlFor="address"
                style={{
                  fontWeight: "bold",
                  marginBottom: "8px",
                  display: "block",
                }}
              >
                Address
              </label>
              <input
                type="text"
                id="address"
                name="address"
                value={address}
                onChange={(e) => setAddress(e.target.value)}
                required={role === "VENDOR"}
                style={{
                  width: "100%",
                  padding: "10px",
                  borderRadius: "4px",
                  border: "1px solid #ced4da",
                  boxSizing: "border-box",
                }}
              />
            </div>
          </>
        )}

        {message && (
          <div style={{ color: "green", marginTop: "10px" }}>{message}</div>
        )}
        {error && (
          <div style={{ color: "red", marginTop: "10px" }}>{error}</div>
        )}

        <div
          className="button-group"
          style={{
            display: "flex",
            justifyContent: "flex-end",
            gap: "10px",
            marginTop: "24px",
            gridColumn: "1 / -1",
          }}
        >
          <button
            type="submit"
            className="btn-primary"
            disabled={isLoading}
            style={{
              backgroundColor: "#007bff",
              color: "white",
              border: "none",
              padding: "10px 20px",
              borderRadius: "4px",
              fontWeight: "bold",
              cursor: "pointer",
              transition: "background-color 0.3s",
              opacity: isLoading ? 0.6 : 1,
            }}
            onMouseOver={(e) =>
              (e.currentTarget.style.backgroundColor = isLoading
                ? "#0056b3"
                : "#0056b3")
            }
            onMouseOut={(e) =>
              (e.currentTarget.style.backgroundColor = "#007bff")
            }
          >
            {isLoading ? "Submitting..." : "Submit"}
          </button>
          <button
            type="button"
            onClick={handleCancel}
            className="btn-secondary"
            style={{
              backgroundColor: "#6c757d",
              color: "white",
              border: "none",
              padding: "10px 20px",
              borderRadius: "4px",
              fontWeight: "bold",
              cursor: "pointer",
              transition: "background-color 0.3s",
            }}
            onMouseOver={(e) =>
              (e.currentTarget.style.backgroundColor = "#5a6268")
            }
            onMouseOut={(e) =>
              (e.currentTarget.style.backgroundColor = "#6c757d")
            }
          >
            Cancel
          </button>
        </div>
      </form>
    </div>
  );
};

export default UserRegistrationPage;
